FUNCTION_BLOCK frutter

VAR_INPUT:
	energiaAtual : REAL;
	distancia : REAL;
	valorFruta : REAL;
END_VAR

VAR_OUTPUT:
	decisao : REAL;
END_VAR


FUZZIFY energiaAtual // Fuzzify input variable 'energiaAtual': { 'morrendo', 'estavel', 'hiperativo' }
	TERM morrendo := (0, 1) (1, 1) (1.5, 0);
	TERM estavel := (1, 0) (3,1) (4.5,0);
	TERM hiperativo := (4,0) (5.5, 1)
END_FUZZIFY

FUZZIFY distancia // Fuzzify input variable 'distancia': { 'perto','longe' }
	TERM perto := (0, 1) (1, 1) (4, 0);
	TERM longe := (3, 0) (5,1)
END_FUZZIFY

FUZZIFY valorFruta // Fuzzify input variable 'valorFruta': { 'veneno','pouca', 'muito' }
	TERM veneno := (0, 1) (0.1, 0);
	TERM pouca := (1.9, 0) (2, 1) (2.1, 0);
	TERM muita := (3.9, 0) (4, 1) (4.1, 0)
END_FUZZIFY

DEFUZZIFY decisao // Defuzzify output variable 'decisao' : {'comer', 'deixar' }
	TERM comer :=  (3,0) (5,1);
	TERM deixar := (0,1) (4,0);
	METHOD : COG; // Center of gravity
	DEFAULT := 0; // Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN; // Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN; // Use 'min' activation method
	ACCU : MAX; // Use 'max' accumulation method
	
	RULE 1 : IF energiaAtual IS morrendo AND distancia IS perto THEN decisao IS deixar;
	RULE 2 : IF energiaAtual IS morrendo AND distancia IS longe THEN decisao IS comer;
	RULE 3 : IF energiaAtual IS hiperativo THEN decisao IS deixar;
	RULE 4 : IF energiaAtual IS estavel AND valorFruta IS veneno THEN decisao IS deixar;
	RULE 5 : IF energiaAtual IS estavel AND distancia IS longe THEN decisao IS comer; 
	RULE 6 : IF energiaAtual IS estavel AND distancia IS perto THEN decisao IS deixar;
END_RULEBLOCK

